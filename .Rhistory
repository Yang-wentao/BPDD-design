finish_days[seed, ] <- all_results[[seed]]$finish_day
# 保存 enrollment_times 信息
enrollment_time <- as.data.frame(all_results[[seed]]$enroll)
enrollment_time$Simulation <- seed
all_enrollment_times[[seed]] <- enrollment_time
# 保存 dat 信息
dat_info <- lapply(seq_along(all_results[[seed]]$dat), function(group_id) {
dat_group <- all_results[[seed]]$dat[[group_id]]
if (!is.null(dat_group) && nrow(dat_group) > 0) {
dat_group$Simulation <- seed
dat_group$Group <- group_id
return(dat_group)
} else {
return(NULL)
}
})
all_dat[[seed]] <- do.call(rbind, dat_info)
}
}
# 整理所有 enrollment_times 并保存为 CSV 文件
all_enrollment_times_df <- do.call(rbind, all_enrollment_times)
write.csv(all_enrollment_times_df, "enrollment_times_summary.csv", row.names = FALSE)
cat("\nEnrollment times saved to 'enrollment_times_summary.csv'\n")
# 整理所有 dat 数据并保存为 CSV 文件
all_dat_df <- do.call(rbind, all_dat)
write.csv(all_dat_df, "dat_summary.csv", row.names = FALSE)
cat("\nDat information saved to 'dat_summary.csv'\n")
# 保存 finish_day 信息
write.csv(data.frame(Simulation = 1:num_simulations, finish_days), "finish_days_summary.csv", row.names = FALSE)
cat("\nFinish days saved to 'finish_days_summary.csv'\n")
# 打印并保存剂量统计结果
for (group in 1:ngroup) {
cat("\nGroup", group, "dose selection counts:\n")
print(dose_counts[group, ])
}
# 将剂量选择统计保存为 CSV 文件
write.csv(
as.data.frame(dose_counts),
"dose_selection_counts_summary.csv",
row.names = TRUE
)
cat("\nDose selection counts saved to 'dose_selection_counts_summary.csv'\n")
# 提取所有参数均值
all_means <- do.call(rbind, lapply(1:num_simulations, function(seed) {
if (!is.null(all_results[[seed]]) && is.data.frame(all_results[[seed]]$parameter_mean)) {
data <- all_results[[seed]]$parameter_mean
data$Simulation <- seed  # 添加模拟编号
return(data)
} else {
return(NULL)
}
}))
# 保存参数均值结果
write.csv(all_means, "parameter_means_summary.csv", row.names = FALSE)
cat("\nParameter means saved to 'parameter_means_summary.csv'\n")
# === 整理剂量分配数据并保存 ===
all_data <- data.frame()
for (k in 1:num_simulations) {
if (!is.null(all_results[[k]]$dose_pick)) {
for (j in 1:length(all_results[[k]]$dose_pick)) {
group_data <- all_results[[k]]$dose_pick[[j]]
group_df <- data.frame(
Simulation = k,
Group = j,
d.select = group_data$d.select,
d.alloc = group_data$d.alloc
)
all_data <- rbind(all_data, group_df)
}
}
}
# 保存剂量分配结果
write.csv(all_data, "dose_allocation_summary.csv", row.names = FALSE)
cat("\nDose allocation saved to 'dose_allocation_summary.csv'\n")
cat("\nParallel results saved to CSV files.\n")
}
# R/parallel_simulation.R
library(parallel)
library(tictoc)
parallel_simulation <- function(num_simulations = 4, num_cores = 4) {
# 加载必要的包
# 设置随机数流
RNGkind("L'Ecuyer-CMRG")
set.seed(1004)
# 初始化真值赋值（根据实际需求调整）
cT_true = 1; eta_0T_true = 0; eta_1T_true = 2
cE_true = 2; eta_0E_true = 0; eta_1E_true = 2
U_T = 30; U_E = 90; C_T = 0.05; C_E = 0.05
cohortsize = 3  # the cohort size
phi.T = 0.3  # upper limit of the toxicity rate
phi.E = 0.3  # lower limit of the efficacy rate
type = 'binary'  # Y^E is binary
# 初始化模拟环境（具体内容根据需要调整）
ngroup = 4
vd <- list(
c(0.35, 0.7, 0.80, 0.90),
c(0.20, 0.49, 0.73, 0.81),
c(0.10, 0.24, 0.50, 0.7),
c(0.11, 0.18, 0.28, 0.52)
)
pt.mat <- vector("list", ngroup)
vpt <- rbind(
c(-0.22, 1, 0.1, 0.5),
c(-0.25, 3, 0.1, 0.5),
c(-0.1, 2.4, 0.1, 0.5),
c(-0.1, 4, 0.1, 0.5)
)
# 生成 prior.pt.mat 和 prior.pe.mat
prior.pt.mat <- vector("list", ngroup)
prior.pe.mat <- vector("list", ngroup)
for (i in 1:ngroup) {
if (length(vd[[i]]) == 4) {
prior.pt.mat[[i]] = c(0.10, 0.20, 0.30, 0.40)
prior.pe.mat[[i]] = c(0.15, 0.30, 0.45, 0.40)
} else if (length(vd[[i]]) == 3) {
prior.pt.mat[[i]] = c(0.10, 0.20, 0.30)
prior.pe.mat[[i]] = c(0.15, 0.30, 0.45)
}
}
# 定义并行任务函数
run_parallel_simulation <- function(seed) {
set.seed(seed)
# 运行主函数
result <- main_BPDD(
n.cohortsize = 14, cohortsize = 3, phi.T = 0.3, phi.E = 0.3,
pt.mat = pt.mat, prior.pt.mat = prior.pt.mat, prior.pe.mat = prior.pe.mat,
vpt = vpt, vd = vd, type = "binary", C_T = 0.05, C_E = 0.05
)
return(result)
}
# === 并行计算 ===
tic.clearlog()  # 清空计时日志
tic("Parallel Simulations")
# 使用 mclapply 并行运行
all_results <- mclapply(
1:num_simulations,
function(seed) {
tryCatch(
{
# 生成并记录当前种子
.Random.seed <- parallel::nextRNGStream(.Random.seed)  # 独立随机数流
# .Random.seed <- c(10407, -556808394, 1783241550, 1182257813, -1010027709, 1161850085, -773962436)
current_seed <- .Random.seed  # 保存当前的随机种子
# 打印当前种子信息到控制台
cat("Running simulation for seed:", seed, "\n")
# 保存当前种子到文件，用于调试
seed_log <- paste("Seed for simulation", seed, ":", paste(current_seed, collapse = " "), "\n")
write(seed_log, file = "all_seeds.log", append = TRUE)
# 调用主函数并返回结果
run_simulation(seed, source_path)
},
error = function(e) {
# 记录错误的种子和信息
error_log <- paste("Error in simulation for seed:", seed, "\n", e$message, "\n")
write(error_log, file = "error_seeds.log", append = TRUE)
return(NULL)
}
)
},
mc.cores = num_cores,
mc.preschedule = FALSE
)
execution_time <- toc()  # 获取运行时间
# 保存运行时间为 CSV 文件
execution_times <- data.frame(
Task = execution_time$msg,
Elapsed_Time_Sec = execution_time$toc - execution_time$tic
)
write.csv(
execution_times,
"execution_times_summary.csv",
row.names = FALSE
)
cat("\nExecution times saved to 'execution_times_summary.csv'\n")
# 保存 all_results 到 Rdata 文件
save(all_results, file = "all_results.Rdata")
cat("\nAll simulation results saved to 'all_results.Rdata'\n")
# === 结果统计 ===
cat("\n=== Result Statistics ===\n")
# 初始化统计变量
dose_counts <- matrix(0, nrow = ngroup, ncol = 4)  # 剂量选择统计
finish_days <- matrix(NA, nrow = num_simulations, ncol = ngroup)  # 存储所有模拟的 finish_day
all_enrollment_times <- list()  # 存储所有模拟的 enrollment_times
all_dat <- list()  # 存储所有模拟的 dat
# 遍历结果提取数据
for (seed in 1:num_simulations) {
if (!is.null(all_results[[seed]]) && is.list(all_results[[seed]]$dose_pick)) {
for (group in 1:ngroup) {
selected_dose <- all_results[[seed]]$dose_pick[[group]]$d.select
if (!is.null(selected_dose) && selected_dose > 0) {
dose_counts[group, selected_dose] <- dose_counts[group, selected_dose] + 1
}
}
# 保存 finish_day 信息
finish_days[seed, ] <- all_results[[seed]]$finish_day
# 保存 enrollment_times 信息
enrollment_time <- as.data.frame(all_results[[seed]]$enroll)
enrollment_time$Simulation <- seed
all_enrollment_times[[seed]] <- enrollment_time
# 保存 dat 信息
dat_info <- lapply(seq_along(all_results[[seed]]$dat), function(group_id) {
dat_group <- all_results[[seed]]$dat[[group_id]]
if (!is.null(dat_group) && nrow(dat_group) > 0) {
dat_group$Simulation <- seed
dat_group$Group <- group_id
return(dat_group)
} else {
return(NULL)
}
})
all_dat[[seed]] <- do.call(rbind, dat_info)
}
}
# 整理所有 enrollment_times 并保存为 CSV 文件
all_enrollment_times_df <- do.call(rbind, all_enrollment_times)
write.csv(all_enrollment_times_df, "enrollment_times_summary.csv", row.names = FALSE)
cat("\nEnrollment times saved to 'enrollment_times_summary.csv'\n")
# 整理所有 dat 数据并保存为 CSV 文件
all_dat_df <- do.call(rbind, all_dat)
write.csv(all_dat_df, "dat_summary.csv", row.names = FALSE)
cat("\nDat information saved to 'dat_summary.csv'\n")
# 保存 finish_day 信息
write.csv(data.frame(Simulation = 1:num_simulations, finish_days), "finish_days_summary.csv", row.names = FALSE)
cat("\nFinish days saved to 'finish_days_summary.csv'\n")
# 打印并保存剂量统计结果
for (group in 1:ngroup) {
cat("\nGroup", group, "dose selection counts:\n")
print(dose_counts[group, ])
}
# 将剂量选择统计保存为 CSV 文件
write.csv(
as.data.frame(dose_counts),
"dose_selection_counts_summary.csv",
row.names = TRUE
)
cat("\nDose selection counts saved to 'dose_selection_counts_summary.csv'\n")
# 提取所有参数均值
all_means <- do.call(rbind, lapply(1:num_simulations, function(seed) {
if (!is.null(all_results[[seed]]) && is.data.frame(all_results[[seed]]$parameter_mean)) {
data <- all_results[[seed]]$parameter_mean
data$Simulation <- seed  # 添加模拟编号
return(data)
} else {
return(NULL)
}
}))
# 保存参数均值结果
write.csv(all_means, "parameter_means_summary.csv", row.names = FALSE)
cat("\nParameter means saved to 'parameter_means_summary.csv'\n")
# === 整理剂量分配数据并保存 ===
all_data <- data.frame()
for (k in 1:num_simulations) {
if (!is.null(all_results[[k]]$dose_pick)) {
for (j in 1:length(all_results[[k]]$dose_pick)) {
group_data <- all_results[[k]]$dose_pick[[j]]
group_df <- data.frame(
Simulation = k,
Group = j,
d.select = group_data$d.select,
d.alloc = group_data$d.alloc
)
all_data <- rbind(all_data, group_df)
}
}
}
# 保存剂量分配结果
write.csv(all_data, "dose_allocation_summary.csv", row.names = FALSE)
cat("\nDose allocation saved to 'dose_allocation_summary.csv'\n")
cat("\nParallel results saved to CSV files.\n")
}
parallel_simulation(num_simulations = 4, num_cores = 4)
setwd("~/Documents/BPDD/R")
View(parallel_simulation)
View(parallel_simulation)
View(main_BPDD)
View(parallel_simulation)
unloadNamespace("BPDD")
devtools::install("~/Documents/BPDD")  # 安装最新版本的包
library(BPDD)  # 加载包
parallel_simulation(num_simulations = 4, num_cores = 4)
set("~/Documents/BPDD/R/data")
setwd("~/Documents/BPDD/R/data")
devtools::install("~/Documents/BPDD")  # 安装最新版本的包
library(BPDD)  # 加载包
remove("BPDD")
remove("package:BPDD")
remove.packages("BPDD")
devtools::install("~/Documents/BPDD")  # 安装最新版本的包
unloadNamespace("BPDD")
devtools::install("~/Documents/BPDD")  # 安装最新版本的包
library(BPDD)  # 加载包
force(main_BPDD)
View(main_BPDD)
View(parallel_simulation)
View(parallel_simulation)
View(parallel_simulation)
View(main_BPDD)
View(parallel_simulation)
View(main_BPDD)
devtools::install("~/Documents/BPDD")  # 安装最新版本的包
library(BPDD)  # 加载包
library(testthat)
test_dir("tests")  # 运行 tests 目录中的所有测试
setwd("~/Documents/BPDD")
library(testthat)
test_dir("tests")  # 运行 tests 目录中的所有测试
devtools::install("~/Documents/BPDD")  # 安装最新版本的包
library(BPDD)  # 加载包
library(testthat)
test_dir("tests")  # 运行 tests 目录中的所有测试
library(parallel)
library(tictoc)
# 加载必要的包
# 设置随机数流
num_simulations <- 8
num_cores <- 4
RNGkind("L'Ecuyer-CMRG")
set.seed(1004)
# 初始化真值赋值（根据实际需求调整）
cT_true = 1; eta_0T_true = 0; eta_1T_true = 2
cE_true = 2; eta_0E_true = 0; eta_1E_true = 2
U_T = 30; U_E = 90; C_T = 0.05; C_E = 0.05
cohortsize = 3  # the cohort size
phi.T = 0.3  # upper limit of the toxicity rate
phi.E = 0.3  # lower limit of the efficacy rate
type = 'binary'  # Y^E is binary
# 初始化模拟环境（具体内容根据需要调整）
ngroup = 4
vd <- list(
c(0.35, 0.7, 0.80, 0.90),
c(0.20, 0.49, 0.73, 0.81),
c(0.10, 0.24, 0.50, 0.7),
c(0.11, 0.18, 0.28, 0.52)
)
pt.mat <- vector("list", ngroup)
vpt <- rbind(
c(-0.22, 1, 0.1, 0.5),
c(-0.25, 3, 0.1, 0.5),
c(-0.1, 2.4, 0.1, 0.5),
c(-0.1, 4, 0.1, 0.5)
)
# 生成 prior.pt.mat 和 prior.pe.mat
prior.pt.mat <- vector("list", ngroup)
prior.pe.mat <- vector("list", ngroup)
for (i in 1:ngroup) {
if (length(vd[[i]]) == 4) {
prior.pt.mat[[i]] = c(0.10, 0.20, 0.30, 0.40)
prior.pe.mat[[i]] = c(0.15, 0.30, 0.45, 0.40)
} else if (length(vd[[i]]) == 3) {
prior.pt.mat[[i]] = c(0.10, 0.20, 0.30)
prior.pe.mat[[i]] = c(0.15, 0.30, 0.45)
}
}
# 定义并行任务函数
run_parallel_simulation <- function(seed) {
set.seed(seed)
# 运行主函数
result <- main_BPDD(
n.cohortsize = 14, cohortsize = 3, phi.T = 0.3, phi.E = 0.3,
pt.mat = pt.mat, prior.pt.mat = prior.pt.mat, prior.pe.mat = prior.pe.mat,
vpt = vpt, vd = vd, type = "binary", C_T = 0.05, C_E = 0.05
)
return(result)
}
# === 并行计算 ===
tic.clearlog()  # 清空计时日志
tic("Parallel Simulations")
# 使用 mclapply 并行运行
all_results <- mclapply(
1:num_simulations,
function(seed) {
tryCatch(
{
# 生成并记录当前种子
.Random.seed <- parallel::nextRNGStream(.Random.seed)  # 独立随机数流
# .Random.seed <- c(10407, -556808394, 1783241550, 1182257813, -1010027709, 1161850085, -773962436)
current_seed <- .Random.seed  # 保存当前的随机种子
# 打印当前种子信息到控制台
cat("Running simulation for seed:", seed, "\n")
# 保存当前种子到文件，用于调试
seed_log <- paste("Seed for simulation", seed, ":", paste(current_seed, collapse = " "), "\n")
write(seed_log, file = "all_seeds.log", append = TRUE)
# 调用主函数并返回结果
run_simulation(seed, source_path)
},
error = function(e) {
# 记录错误的种子和信息
error_log <- paste("Error in simulation for seed:", seed, "\n", e$message, "\n")
write(error_log, file = "error_seeds.log", append = TRUE)
return(NULL)
}
)
},
mc.cores = num_cores,
mc.preschedule = FALSE
)
execution_time <- toc()  # 获取运行时间
# 保存运行时间为 CSV 文件
execution_times <- data.frame(
Task = execution_time$msg,
Elapsed_Time_Sec = execution_time$toc - execution_time$tic
)
write.csv(
execution_times,
"execution_times_summary.csv",
row.names = FALSE
)
cat("\nExecution times saved to 'execution_times_summary.csv'\n")
# 保存 all_results 到 Rdata 文件
save(all_results, file = "all_results.Rdata")
cat("\nAll simulation results saved to 'all_results.Rdata'\n")
# === 结果统计 ===
cat("\n=== Result Statistics ===\n")
# 初始化统计变量
dose_counts <- matrix(0, nrow = ngroup, ncol = 4)  # 剂量选择统计
finish_days <- matrix(NA, nrow = num_simulations, ncol = ngroup)  # 存储所有模拟的 finish_day
all_enrollment_times <- list()  # 存储所有模拟的 enrollment_times
all_dat <- list()  # 存储所有模拟的 dat
# 遍历结果提取数据
for (seed in 1:num_simulations) {
if (!is.null(all_results[[seed]]) && is.list(all_results[[seed]]$dose_pick)) {
for (group in 1:ngroup) {
selected_dose <- all_results[[seed]]$dose_pick[[group]]$d.select
if (!is.null(selected_dose) && selected_dose > 0) {
dose_counts[group, selected_dose] <- dose_counts[group, selected_dose] + 1
}
}
# 保存 finish_day 信息
finish_days[seed, ] <- all_results[[seed]]$finish_day
# 保存 enrollment_times 信息
enrollment_time <- as.data.frame(all_results[[seed]]$enroll)
enrollment_time$Simulation <- seed
all_enrollment_times[[seed]] <- enrollment_time
# 保存 dat 信息
dat_info <- lapply(seq_along(all_results[[seed]]$dat), function(group_id) {
dat_group <- all_results[[seed]]$dat[[group_id]]
if (!is.null(dat_group) && nrow(dat_group) > 0) {
dat_group$Simulation <- seed
dat_group$Group <- group_id
return(dat_group)
} else {
return(NULL)
}
})
all_dat[[seed]] <- do.call(rbind, dat_info)
}
}
# 整理所有 enrollment_times 并保存为 CSV 文件
all_enrollment_times_df <- do.call(rbind, all_enrollment_times)
write.csv(all_enrollment_times_df, "enrollment_times_summary.csv", row.names = FALSE)
cat("\nEnrollment times saved to 'enrollment_times_summary.csv'\n")
# 整理所有 dat 数据并保存为 CSV 文件
all_dat_df <- do.call(rbind, all_dat)
write.csv(all_dat_df, "dat_summary.csv", row.names = FALSE)
cat("\nDat information saved to 'dat_summary.csv'\n")
# 保存 finish_day 信息
write.csv(data.frame(Simulation = 1:num_simulations, finish_days), "finish_days_summary.csv", row.names = FALSE)
cat("\nFinish days saved to 'finish_days_summary.csv'\n")
# 打印并保存剂量统计结果
for (group in 1:ngroup) {
cat("\nGroup", group, "dose selection counts:\n")
print(dose_counts[group, ])
}
# 将剂量选择统计保存为 CSV 文件
write.csv(
as.data.frame(dose_counts),
"dose_selection_counts_summary.csv",
row.names = TRUE
)
cat("\nDose selection counts saved to 'dose_selection_counts_summary.csv'\n")
# 提取所有参数均值
all_means <- do.call(rbind, lapply(1:num_simulations, function(seed) {
if (!is.null(all_results[[seed]]) && is.data.frame(all_results[[seed]]$parameter_mean)) {
data <- all_results[[seed]]$parameter_mean
data$Simulation <- seed  # 添加模拟编号
return(data)
} else {
return(NULL)
}
}))
# 保存参数均值结果
write.csv(all_means, "parameter_means_summary.csv", row.names = FALSE)
cat("\nParameter means saved to 'parameter_means_summary.csv'\n")
# === 整理剂量分配数据并保存 ===
all_data <- data.frame()
for (k in 1:num_simulations) {
if (!is.null(all_results[[k]]$dose_pick)) {
for (j in 1:length(all_results[[k]]$dose_pick)) {
group_data <- all_results[[k]]$dose_pick[[j]]
group_df <- data.frame(
Simulation = k,
Group = j,
d.select = group_data$d.select,
d.alloc = group_data$d.alloc
)
all_data <- rbind(all_data, group_df)
}
}
}
# 保存剂量分配结果
write.csv(all_data, "dose_allocation_summary.csv", row.names = FALSE)
cat("\nDose allocation saved to 'dose_allocation_summary.csv'\n")
cat("\nParallel results saved to CSV files.\n")
devtools::install("~/Documents/BPDD")  # 安装最新版本的包
library(BPDD)  # 加载包
unloadNamespace("BPDD")
devtools::install("~/Documents/BPDD")  # 安装最新版本的包
library(BPDD)  # 加载包
force(main_BPDD)
setwd(~/Documents/BPDD/data)
setwd("~/Documents/BPDD/data")
parallel_simulation(num_simulations = 4, num_cores = 4)
